generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  clerkId   String   @unique
  email     String   @unique
  firstName String?
  lastName  String?
  imageUrl  String?
  role      UserRole @default(CUSTOMER)
  points    Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orders        Order[]
  wishlistItems WishlistItem[]
  addresses     Address[]
  reviews       Review[]
  pointsHistory PointsHistory[]
}

enum UserRole {
  ADMIN
  CUSTOMER
}

model Product {
  id             String   @id @default(cuid())
  name           String
  description    String   @db.Text
  price          Float
  compareAtPrice Float?
  images         String[]
  category       String
  tags           String[]
  stock          Int      @default(0)
  featured       Boolean  @default(false)
  isNewArrival   Boolean  @default(true)
  hasVariants    Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  orderItems    OrderItem[]
  wishlistItems WishlistItem[]
  reviews       Review[]
  variants      ProductVariant[]
  GalleryImage  GalleryImage[]
}

model ProductVariant {
  id        String  @id @default(cuid())
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  color    String?
  colorHex String? // Hex color value like #FF5733
  size     String?
  sku      String? @unique

  images      String[]
  price       Float? // Optional: override product price
  stock       Int      @default(0)
  isAvailable Boolean  @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  orderItems OrderItem[]

  @@unique([productId, color, size])
}

model Order {
  id             String      @id @default(cuid())
  userId         String
  user           User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  orderNumber    String      @unique
  status         OrderStatus @default(PENDING)
  subtotal       Float
  discount       Float       @default(0)
  shipping       Float       @default(0)
  tax            Float       @default(0)
  total          Float
  couponCode     String?
  pointsEarned   Int         @default(0)
  pointsRedeemed Int         @default(0)

  // Shipping info
  shippingName    String
  shippingEmail   String
  shippingPhone   String?
  shippingAddress String
  shippingCity    String
  shippingState   String
  shippingZip     String
  shippingCountry String

  // Tracking
  trackingNumber    String?
  carrier           String?
  estimatedDelivery DateTime?

  // Payment
  stripePaymentId String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items OrderItem[]
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model OrderItem {
  id        String          @id @default(cuid())
  orderId   String
  order     Order           @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productId String
  product   Product         @relation(fields: [productId], references: [id])
  variantId String?
  variant   ProductVariant? @relation(fields: [variantId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime        @default(now())
}

model WishlistItem {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())

  @@unique([userId, productId])
}

model Address {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  name      String
  phone     String?
  address   String
  city      String
  state     String
  zip       String
  country   String
  isDefault Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Review {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  rating    Int
  comment   String?  @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, productId])
}

model PointsHistory {
  id          String     @id @default(cuid())
  userId      String
  user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  points      Int
  type        PointsType
  description String
  orderId     String?
  createdAt   DateTime   @default(now())
}

enum PointsType {
  EARNED
  REDEEMED
  EXPIRED
}

model Coupon {
  id            String       @id @default(cuid())
  code          String       @unique
  description   String?
  discountType  DiscountType
  discountValue Float
  minPurchase   Float?
  maxDiscount   Float?
  expiresAt     DateTime?
  usageLimit    Int?
  usageCount    Int          @default(0)
  isActive      Boolean      @default(true)
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

enum DiscountType {
  PERCENTAGE
  FIXED
}

model GalleryImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  category  String   @default("general")
  order     Int      @default(0)
  isActive  Boolean  @default(true)
  productId String?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model ScheduledEmail {
  id           String      @id @default(cuid())
  subject      String
  content      String      @db.Text
  previewText  String?
  scheduledFor DateTime
  status       EmailStatus @default(PENDING)
  sentAt       DateTime?
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
}

enum EmailStatus {
  PENDING
  SENT
  FAILED
}
